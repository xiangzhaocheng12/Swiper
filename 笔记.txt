Django 中的类字典对象
request.GET
request.POST
request.FILES
request.session



Flase 中的类字典对象
request.args
request.form
request.files
session
---------------------
1. cookie  和session
  # 默认的 HTTP协议的端口是80，默认的HTTPS协议的端口号是443
2. 请求在Django 中执行的过程
    一. 从用户点击链接到页面显示的全过程？
        ① 点击   http://www.baidu.com
        ② 客户端进行 DNS 解析   www.abcd.com  -> 11.22.33.44
            # HTTP 协议是建立在 TCP 协议上的 "短链接"  协议： 只通信一次, 然后就断掉了
            # TCP 是全双工协议
        ③ 客户端和服务器简历 TCP 连接
            三次握手:
            1. client -> SYN -> server
            2. client <- ACK + SYN <- server
            3. client ->       ACK -> server
        ④ 浏览器构造'请求报文'
        ⑤ 浏览器将'请求报文'发送到服务器
    二. Django 中的操作
        ① Django 的  HTTP Server 接收客户端的请求报文
            # Http Server 用来：
            #    1. 接收和发送数据
            #    2. 建立和断开连接
        ② WSGI 模块将 "请求报文" 解析并封装成 HttpRequest 对象
        ------------------------------------->  process_request
        ③ 进行 URL 匹配, 得到对应的视图函数
        ------------------------------------->  process_view
        ④ 视图函数进行处理
            |-1. 获取、检查参数
            |-2. 进行业务逻辑处理(缓存、数据库、运算)
            |-3. 将结果数据转化成前端需要的格式(模板渲染, 封装 JSON)
            |---------------------------------->  process_template(这一层的中间件用的极少)
            |-4. 将结果封装成 HttpResponse 对象
            +--------------------------------------> 仅当出现异常时触发 process_exception


            --------------------------------->  process_response
        ⑤ WSGI 将 HttpResponse对象转化成"响应报文"
        ⑥ Http Server 将"响应报文" 传给客户端
        ⑥ HTTP Server 断开与客户端的连接
            1. server -> FIN ->client
            # 为什么不能把四次挥手的过程有化成三次挥手的过程？
            2. server <- ACK <- client

            中间的时间:等待传输结束, 客户端检查是否有丢包

            3. server <- FIN <- client
            4. server -> ACK -> client
        ⑦ 客户端接收"响应报文"
        ⑧ 客户端解析、渲染、呈现页面


索引
    哈希索引
        底层使用的是哈希表, 通过哈希表上面一个槽的位置来进行匹配
        时间复杂度: O(1)

    select * from user where name like '张%';   # 此时可以使用索引
    select * from user where name like '%张';   # 此时无法使用索引




    B 树, B+树

定位
    GPS
    基站定位
    WI-FI
    IP 定位
经度 -180~ 180
维度 -90 ~ 90

GEO Hash : 精度不高, 模糊匹配的方式


--------------------------------------------
Day06:
git
    branch
    master
    develop
    feature

    pull request -> 代码审核(新人如果三次代码审核都不行, 基本上就凉了)
user
    发短信(跟第三方平台的对接, 关键是看平台的接口文档, Celery异步[还可以做定时])
    登陆(中间件、session、Django 源码)
    查看交友资料信息(user表和profile表一对一的关系、外键、property)
    修改个人信息(Form、ModelForm)
    七牛云
        1. 客户端 -> 服务器, 获取 token
        2. 客户端 -> 七牛云: 携带 Token 上传头像
        3. 七牛云 -> 访问服务器:七牛云的回调(回调服务器, 服务器保存结构)
        4. 七牛云 -> 客户端:通知客户端上传成功
social
    推荐:
        1. 创建机器人: 独立脚本如何调用 Django 项目中的模块
        2. Django ORM
        3. 企业中的一些推荐
    '喜欢'接口:联合唯一, 联合主键(底层使用的都是联合唯一的索引来操作的)
        class Meta:
            unique_together = ('uid', 'sid')

        联合唯一
        create table swiped(
            uid int,
            sid int,
            unique(uid,sid)
        )
        联合主键
        create table swipped(
            uid it,
            sid int,
            primary key (uid, sid),
        )


python 垃圾会回收机制
- 引用计数
- 标记清除
- 分代收集

- - 引用计数:
a = 1234567
b = a
    python 会针对每个变量进行记录, 当前的引用计数会减一
del b   # 此时该变量会减少 1

- - 引用计数所不能回收的:
a = [1,2,3]
b = [3,2,1]
a.append(a)
b.append(a)    # 循环引用无法进行清除, 需要使用标记清除的方式

- - 分代收集:

装饰器:
def foo(func1):
    def wrapper(*args,**kwargs):

        return
    return

服务器的内存查看：
    top/htop/free

Linux 的五个命令:
    ps      grep    scp     chmod   chown
    